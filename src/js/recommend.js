import { getAiRecommendation } from "./api/ai.js";
import { showLoading, hideLoading } from "./components/loading.js";
import {
  formatCurrency,
  stripDigits,
  formatDate,
  getCurrencySymbol,
} from "./utils/format.js";
import { sanitizePlan } from "./utils/sanitizePlan.js";

// XSS Î∞©Ïñ¥Î•º ÏúÑÌïú HTML Ïù¥Ïä§ÏºÄÏù¥ÌîÑ Ìï®Ïàò
function escapeHtml(text) {
  const div = document.createElement("div");
  div.textContent = text;
  return div.innerHTML;
}

class NumberUtils {
  static formatInputCurrency(input) {
    const posFromEnd = input.value.length - input.selectionStart;
    const onlyNum = stripDigits(input.value);
    input.value = onlyNum ? Number(onlyNum).toLocaleString("ko-KR") : "";
    const newPos = input.value.length - posFromEnd;
    input.setSelectionRange(newPos, newPos);
  }
}

class GeoUtils {
  static haversine([lat1, lon1], [lat2, lon2]) {
    const R = 6371;
    const dLat = ((lat2 - lat1) * Math.PI) / 180;
    const dLon = ((lon2 - lon1) * Math.PI) / 180;
    const a =
      Math.sin(dLat / 2) ** 2 +
      Math.cos((lat1 * Math.PI) / 180) *
        Math.cos((lat2 * Math.PI) / 180) *
        Math.sin(dLon / 2) ** 2;
    return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  }
}

class ItineraryPlanner {
  // ÏãúÍ∞ÑÎåÄÎ≥Ñ Ïö∞ÏÑ†ÏàúÏúÑ (Ïã§Ï†ú ÏãúÍ∞Ñ ÌùêÎ¶Ñ ÏàúÏÑú)
  static TIME_SLOT_ORDER = {
    morning: 1, // 07:00~09:00 (ÏïÑÏπ® ÏãùÏÇ¨, Í≥µÌï≠ ÎèÑÏ∞©)
    late_morning: 2, // 09:00~12:00 (Ïò§Ï†Ñ Í¥ÄÍ¥ë)
    afternoon: 3, // 12:00~14:00 (Ï†êÏã¨ ÏãùÏÇ¨)
    tea: 4, // 14:00~17:00 (Ïò§ÌõÑ ÌôúÎèô, Ïπ¥Ìéò)
    evening: 5, // 17:00~20:00 (Ï†ÄÎÖÅ ÏãùÏÇ¨)
    night: 6, // 20:00~23:00 (ÏïºÍ∞Ñ ÌôúÎèô)
  };

  // categoryÎ•º Í∏∞Î∞òÏúºÎ°ú Í∏∞Î≥∏ timeSlot Ï∂îÎ°†
  static inferTimeSlot(category) {
    const categoryToTimeSlot = {
      // ÏãùÏÇ¨ (Î∞òÎìúÏãú ÏãúÍ∞ÑÎåÄ Í≥†Ï†ï)
      breakfast: "morning", // ÏïÑÏπ® = morning
      lunch: "afternoon", // Ï†êÏã¨ = afternoon
      dinner: "evening", // Ï†ÄÎÖÅ = evening

      // Í∞ÑÏãù/Ïπ¥Ìéò
      snack: "tea", // Í∞ÑÏãù = tea (Ïò§ÌõÑ)
      cafe: "tea", // Ïπ¥Ìéò = tea (Ïò§ÌõÑ)

      // ÍµêÌÜµ/Ïù¥Îèô
      airport: "morning", // Í≥µÌï≠ = morning (Ï≤´ÎÇ†) ÎòêÎäî late_morning (ÎßàÏßÄÎßâÎÇ†)
      transfer: "late_morning", // Ïù¥Îèô = late_morning

      // ÌôúÎèô
      sightseeing: "late_morning", // Í¥ÄÍ¥ë = Ïò§Ï†Ñ (Í∏∞Î≥∏Í∞í)
      shopping: "tea", // ÏáºÌïë = Ïò§ÌõÑ (Í∏∞Î≥∏Í∞í)
      activity: "tea", // Ïï°Ìã∞ÎπÑÌã∞ = Ïò§ÌõÑ (Í∏∞Î≥∏Í∞í)
      nightlife: "night", // ÏïºÍ∞ÑÌôúÎèô = night
    };
    return categoryToTimeSlot[category] || "late_morning";
  }

  // stopsÎ•º ÏãúÍ∞Ñ ÏàúÏÑúÎåÄÎ°ú Ï†ïÎ†¨
  static sortByTimeSlot(stops) {
    if (!Array.isArray(stops) || stops.length === 0) {
      return stops;
    }

    return [...stops].sort((a, b) => {
      const timeSlotA =
        a.timeSlot || ItineraryPlanner.inferTimeSlot(a.category);
      const timeSlotB =
        b.timeSlot || ItineraryPlanner.inferTimeSlot(b.category);

      const orderA = ItineraryPlanner.TIME_SLOT_ORDER[timeSlotA] || 99;
      const orderB = ItineraryPlanner.TIME_SLOT_ORDER[timeSlotB] || 99;

      return orderA - orderB;
    });
  }

  static optimizeDay(stops, { maxStops = 15, maxTravelKm = 75 } = {}) {
    // 1. Î®ºÏ†Ä ÏãúÍ∞ÑÏàúÏúºÎ°ú Ï†ïÎ†¨ (Í∞ÄÏû• Ï§ëÏöî!)
    const timeSorted = ItineraryPlanner.sortByTimeSlot(stops);
    const pts = timeSorted.filter((s) => isFinite(s.lat) && isFinite(s.lng));

    if (pts.length <= 1) return pts;

    // 2. ÏãúÍ∞ÑÏàú Ï†ïÎ†¨ÏùÑ Ïú†ÏßÄÌïòÎ©¥ÏÑú ÏµúÎåÄ Í∞úÏàòÎßå Ï†úÌïú
    // (ÎèôÏÑ† ÏµúÏ†ÅÌôîÎäî ÏãúÍ∞Ñ ÏàúÏÑúÎ•º Íπ®Îú®Î¶¥ Ïàò ÏûàÏúºÎØÄÎ°ú Ï†ÅÏö©ÌïòÏßÄ ÏïäÏùå)
    const limited = pts.slice(0, maxStops);

    // 3. Í±∞Î¶¨ Ï†úÌïú Ï≤¥ÌÅ¨ (ÏãúÍ∞ÑÏàú Ïú†ÏßÄÌïòÎ©¥ÏÑú)
    let total = 0;
    const pruned = [limited[0]];

    for (let i = 1; i < limited.length; i++) {
      const d = GeoUtils.haversine(
        [pruned[pruned.length - 1].lat, pruned[pruned.length - 1].lng],
        [limited[i].lat, limited[i].lng]
      );

      // Í±∞Î¶¨ Ï†úÌïúÏùÑ Ï¥àÍ≥ºÌïòÎçîÎùºÎèÑ ÏãùÏÇ¨Îäî Î∞òÎìúÏãú Ìè¨Ìï®
      const isMeal = ["breakfast", "lunch", "dinner"].includes(
        limited[i].category
      );

      if (total + d <= maxTravelKm || isMeal) {
        total += d;
        pruned.push(limited[i]);
      }
    }

    return pruned;
  }
  static optimizeAll(dayPlans) {
    return dayPlans.map((dp) => ({
      ...dp,
      stops: ItineraryPlanner.optimizeDay(dp.stops),
    }));
  }
}

class MapRenderer {
  constructor(mapId) {
    this.mapId = mapId;
    this.map = null;
    this.layer = null;
  }

  init(center, zoom = 12) {
    if (this.map) {
      this.map.remove();
    }
    this.map = L.map(this.mapId, { scrollWheelZoom: false }).setView(
      center,
      zoom
    );
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "&copy; OpenStreetMap contributors",
      maxZoom: 19,
    }).addTo(this.map);
    this.layer = L.layerGroup().addTo(this.map);
  }

  // Î™®Îì† Ïó¨Ï†ïÏùò Í≤ΩÎ°ú Îßµ Íµ¨ÏÑ± Î°úÏßÅ
  renderDayPlans(dayPlans) {
    if (!this.map || !this.layer) return;
    this.layer.clearLayers();
    const colors = ["#0ea5ff", "#ef4444", "#10b981", "#f59e0b", "#8b5cf6"];
    const allPts = [];
    dayPlans.forEach((dp, di) => {
      const latLngs = [];
      (dp.stops || []).forEach((s, si) => {
        const latlng = [s.lat, s.lng];
        latLngs.push(latlng);
        allPts.push(latlng);
        L.marker(latlng)
          .bindPopup(
            `<b>Day ${dp.day} ¬∑ ${si + 1}. ${escapeHtml(
              s.placeName
            )}</b><br/>${escapeHtml(s.summary || "")}`
          )
          .addTo(this.layer);
      });
      if (latLngs.length >= 2) {
        L.polyline(latLngs, {
          color: colors[di % colors.length],
          weight: 4,
          opacity: 0.9,
        }).addTo(this.layer);
      }
    });
    if (allPts.length)
      this.map.fitBounds(L.latLngBounds(allPts), { padding: [30, 30] });
  }

  // Ìï¥Îãπ DayÏÑ†ÌÉù Ïãú Îßµ Íµ¨ÏÑ± Î°úÏßÅ
  renderSingleDay(dayPlan) {
    if (!this.map || !this.layer) return;
    this.layer.clearLayers();

    const latLngs = [];
    const allPts = [];

    (dayPlan.stops || []).forEach((s, si) => {
      const latlng = [s.lat, s.lng];
      latLngs.push(latlng);
      allPts.push(latlng);
      L.marker(latlng)
        .bindPopup(
          `<b>Day ${dayPlan.day} ¬∑ ${si + 1}. ${escapeHtml(
            s.placeName
          )}</b><br/>${escapeHtml(s.summary || "")}`
        )
        .addTo(this.layer);
    });

    if (latLngs.length >= 2) {
      L.polyline(latLngs, {
        color: "#0ea5ff", // Pin color (selected day)
        weight: 4,
        opacity: 0.9,
      }).addTo(this.layer);
    }

    if (allPts.length) {
      this.map.fitBounds(L.latLngBounds(allPts), { padding: [30, 30] });
    }
  }
}

class RecommendationRenderer {
  constructor(container, city = "") {
    this.container = container;
    this.city = city;
  }

  static calculateStopCost(stop) {
    // Î∞±ÏóîÎìúÏóêÏÑú Ï†ïÍ∑úÌôîÎêú estimatedCostÎ•º Ìï≠ÏÉÅ ÏÇ¨Ïö©
    return Number(stop.estimatedCost) || 0;
  }

  renderCostBreakdown(stop, city) {
    const currencySymbol = getCurrencySymbol(city);

    if (Array.isArray(stop.costBreakdown) && stop.costBreakdown.length) {
      const items = stop.costBreakdown
        .map((item) => {
          const unit = Number(item.unitJPY) || 0;
          const qty = Number(item.qty) || 1;
          const subJPY = Number(item.subtotalJPY) || unit * qty;
          const subKRW = Number(item.subtotalKRW) || 0;
          const basis = item.basis ? ` ‚Äì ${escapeHtml(item.basis)}` : "";
          const conf = isFinite(item.confidence)
            ? ` (Ïã†Î¢∞ÎèÑ ${item.confidence})`
            : "";

          return `
          <li>
            <strong>${escapeHtml(
              item.category || "Í∏∞ÌÉÄ"
            )}</strong>${basis}${conf}<br/>
            Îã®Í∞Ä: ${currencySymbol}${unit.toLocaleString()} √ó ${qty} = ${currencySymbol}${subJPY.toLocaleString()}<br/>
            ÏõêÌôî: ${subKRW === 0 ? "Î¨¥Î£å" : formatCurrency(subKRW)}
          </li>`;
        })
        .join("");

      return `
        <details class="cost-detail">
          <summary>ÎπÑÏö© Í∑ºÍ±∞ Î≥¥Í∏∞</summary>
          <ul style="margin:.4rem 0 0 .8rem; padding:0; list-style: disc;">
            ${items}
          </ul>
        </details>`;
    }

    if (stop.costReason) {
      return `
        <details class="cost-detail">
          <summary>ÎπÑÏö© Í∑ºÍ±∞ Î≥¥Í∏∞</summary>
          <p>${escapeHtml(stop.costReason)}</p>
        </details>`;
    }

    return "";
  }

  static getMealIcon(category) {
    const mealIcons = {
      breakfast: "üç≥",
      lunch: "üç¥",
      dinner: "üçΩÔ∏è",
      snack: "üç∞",
      cafe: "‚òï",
    };
    return mealIcons[category] || "";
  }

  static getMealLabel(category) {
    const mealLabels = {
      breakfast: "ÏïÑÏπ®",
      lunch: "Ï†êÏã¨",
      dinner: "Ï†ÄÎÖÅ",
      snack: "Í∞ÑÏãù",
      cafe: "Ïπ¥Ìéò",
    };
    return mealLabels[category] || "";
  }

  renderStop(stop, index, city) {
    const stopSum = RecommendationRenderer.calculateStopCost(stop);
    const cbHTML = this.renderCostBreakdown(stop, city);
    const category = stop.category || "";
    const isMeal = ["breakfast", "lunch", "dinner", "snack", "cafe"].includes(
      category
    );
    const mealIcon = isMeal ? RecommendationRenderer.getMealIcon(category) : "";
    const mealLabel = isMeal
      ? RecommendationRenderer.getMealLabel(category)
      : "";
    const mealClass = isMeal ? "meal-stop" : "";

    return `
      <li class="stops-row ${mealClass}" data-category="${escapeHtml(
      category
    )}">
        <span class="idx">${index + 1}</span>
        <div class="place">
          <div class="name">
            ${mealIcon ? `<span class="meal-icon">${mealIcon}</span>` : ""}
            ${mealLabel ? `<span class="meal-label">${mealLabel}</span>` : ""}
            ${escapeHtml(stop.placeName)}
          </div>
          <div class="sub">${escapeHtml(stop.summary || "")}</div>
          ${
            stop.stopReason
              ? `<p class="stop-reason">${escapeHtml(stop.stopReason)}</p>`
              : ""
          }
          ${cbHTML}
        </div>
        <span class="cost">${
          stopSum === 0 ? "Î¨¥Î£å" : formatCurrency(stopSum)
        }</span>
      </li>`;
  }

  renderDayCard(dayPlan, daySum, avgDaily, city) {
    const pct = avgDaily
      ? Math.min(100, Math.round((daySum / avgDaily) * 100))
      : 0;
    const rows = (dayPlan.stops || [])
      .map((s, i) => this.renderStop(s, i, city))
      .join("");

    return `
      <article class="route-card">
        <header class="route-card__head">
          <h4>Day ${dayPlan.day} ‚Äî ${escapeHtml(dayPlan.title || "")}</h4>
        </header>

        <div class="route-card__body" style="display: none;">
          <p class="route-card__reason">
            ${escapeHtml(
              dayPlan.dayReason ||
                "Ïù∏Í∏∞ÏôÄ Ï†ëÍ∑ºÏÑ±ÏùÑ Í≥†Î†§Ìï¥ Ìö®Ïú®Ï†ÅÏù∏ ÎèôÏÑ†ÏúºÎ°ú Íµ¨ÏÑ±ÌñàÏäµÎãàÎã§."
            )}
          </p>

          <div class="budgetbar">
            <div class="bar"><span style="width:${pct}%"></span></div>
            <div class="bar-meta">
              <span>ÏùºÏûê Ìï©Í≥Ñ</span>
              <strong>${formatCurrency(daySum)}</strong>
            </div>
          </div>

          <ol class="stops-table">${rows}</ol>
        </div>
      </article>
    `;
  }

  calculateDaySums(days) {
    // Ïã§Ï†ú ÌôîÎ©¥Ïóê ÌëúÏãúÎêòÎäî stopsÏùò Ìï©Í≥ÑÎ•º Í∏∞Ï§ÄÏúºÎ°ú Í≥ÑÏÇ∞
    return days.map((dp) =>
      (dp.stops || []).reduce(
        (sum, s) => sum + (Number(s.estimatedCost) || 0),
        0
      )
    );
  }

  attachCardToggleEvents(dayPlans, map) {
    const cards = this.container.querySelectorAll(".route-card");
    cards.forEach((card, index) => {
      const head = card.querySelector(".route-card__head");
      const body = card.querySelector(".route-card__body");

      head.addEventListener("click", () => {
        const isOpening = body.style.display === "none";
        this.container.querySelectorAll(".route-card__body").forEach((b) => {
          if (b !== body) b.style.display = "none";
        });
        body.style.display = isOpening ? "block" : "none";

        if (isOpening && dayPlans[index]) {
          map.renderSingleDay(dayPlans[index]);
        }
      });
    });
  }

  render(itinerary, map) {
    const days = itinerary?.dayPlans || [];
    if (!days.length) {
      this.container.innerHTML = "<p>Ï∂îÏ≤ú Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>";
      return;
    }

    // ÎèÑÏãú Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
    const city = itinerary.city || this.city;
    if (itinerary.city) {
      this.city = itinerary.city;
    }

    const daySums = this.calculateDaySums(days);
    const avgDaily = daySums.length
      ? Math.round(daySums.reduce((a, b) => a + b, 0) / daySums.length)
      : 0;

    this.container.innerHTML = days
      .map((dp, idx) =>
        this.renderDayCard(dp, daySums[idx] || 0, avgDaily, city)
      )
      .join("");

    this.attachCardToggleEvents(days, map);
  }
}

/**
 * ÎÇ†Ïî® Ï†ïÎ≥¥Î•º ÌôîÎ©¥Ïóê Î†åÎçîÎßÅÌïòÎäî ÌÅ¥ÎûòÏä§
 */
class WeatherRenderer {
  constructor(container) {
    this.container = container;
  }

  /**
   * ÎÇ†Ïî® ÏÉÅÌÉúÏóê Îî∞Î•∏ ÏïÑÏù¥ÏΩòÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
   */
  getWeatherIcon(season, rainyDays) {
    if (rainyDays > 15) return "üåßÔ∏è";

    const seasonIconMap = {
      Í≤®Ïö∏: "‚ùÑÔ∏è",
      Ïó¨Î¶Ñ: "‚òÄÔ∏è",
      ÎçîÏúÑ: "‚òÄÔ∏è",
      Ïö∞Í∏∞: "üåßÔ∏è",
      Í±¥Í∏∞: "‚òÄÔ∏è",
      Î¥Ñ: "üå∏",
      Í∞ÄÏùÑ: "üçÇ",
    };

    return seasonIconMap[season] || "üå§Ô∏è";
  }

  /**
   * ÎÇ†Ïî® Ï†ïÎ≥¥Î•º Í∏∞Î∞òÏúºÎ°ú HTML Ïπ¥ÎìúÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
   */
  renderWeatherCard(weather) {
    const icon = this.getWeatherIcon(weather.season, weather.rainyDays);
    const isRealTime = weather.isRealTime || false;
    const title = isRealTime
      ? `${escapeHtml(weather.city)} Ïã§ÏãúÍ∞Ñ ÏòàÎ≥¥`
      : `${escapeHtml(weather.city)} ${weather.month}Ïõî ÌèâÍ∑† ÎÇ†Ïî®`;

    const precipitationLabel = isRealTime ? "Í∞ïÏàò ÌôïÎ•†" : "Í∞ïÏàòÎüâ";
    const precipitationValue = isRealTime
      ? `${weather.precipitation}%`
      : `${weather.precipitation}mm`;

    return `
      <div class="weather-card ${isRealTime ? "weather-card--realtime" : ""}">
        <div class="weather-header">
          <div class="weather-icon">${icon}</div>
          <div class="weather-title">
            <h4>${title}</h4>
            <span class="weather-season">${escapeHtml(weather.season)}</span>
          </div>
        </div>

        ${isRealTime ? `<div class="weather-badge">‚ö° Ïã§ÏãúÍ∞Ñ ÏòàÎ≥¥</div>` : ""}

        <div class="weather-temp">
          <div class="temp-item">
            <span class="temp-label">ÏµúÏ†Ä</span>
            <span class="temp-value temp-value-left">${weather.tempLow}¬∞C</span>
          </div>
          <div class="temp-divider"></div>
          <div class="temp-item">
            <span class="temp-label">ÏµúÍ≥†</span>
            <span class="temp-value temp-value-right">${
              weather.tempHigh
            }¬∞C</span>
          </div>
        </div>

        <div class="weather-details">
          <div class="detail-item">
            <span class="detail-icon">üíß</span>
            <span class="detail-text">${precipitationLabel} ${precipitationValue}</span>
          </div>
          ${
            !isRealTime
              ? `<div class="detail-item">
                  <span class="detail-icon">üåÇ</span>
                  <span class="detail-text">Í∞ïÏàòÏùº ÏïΩ ${weather.rainyDays}Ïùº</span>
                </div>`
              : ""
          }
        </div>

        <div class="weather-tip">
          <div class="tip-icon">üí°</div>
          <div class="tip-content">
            <strong>Ïó¨Ìñâ TIP</strong>
            <p>${escapeHtml(weather.tip)}</p>
          </div>
        </div>

        ${
          !isRealTime
            ? `<div class="weather-notice">
                ‚ÑπÔ∏è ÌèâÍ∑† ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ÏûÖÎãàÎã§. Ïó¨ÌñâÏùºÏù¥ 5Ïùº Ïù¥ÎÇ¥Î©¥ Ïã§ÏãúÍ∞Ñ ÏòàÎ≥¥Í∞Ä ÌëúÏãúÎê©ÎãàÎã§.
              </div>`
            : `<div class="weather-notice weather-notice--success">
                ‚úÖ OpenWeatherMap Ïã§ÏãúÍ∞Ñ ÏòàÎ≥¥ Îç∞Ïù¥ÌÑ∞ÏûÖÎãàÎã§.
              </div>`
        }
      </div>
    `;
  }

  render(weather) {
    if (!weather) {
      this.container.innerHTML = "<p>ÎÇ†Ïî® Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.</p>";
      return;
    }
    this.container.innerHTML = this.renderWeatherCard(weather);
  }

  showLoading() {
    this.container.innerHTML = `
      <div class="loading__spinner">
        <div class="spinner"></div>
        <span>ÎÇ†Ïî® Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§...</span>
      </div>
    `;
  }

  showError(message) {
    this.container.innerHTML = `<p style="color: #ef4444;">${escapeHtml(
      message
    )}</p>`;
  }
}

class AppController {
  constructor() {
    this.result = document.getElementById("recommendResult");
    this.loading = document.getElementById("loadingIndicator");
    this.rightPanel = document.getElementById("rightPanel");
    this.mapContainer = document.querySelector(".panel--map");
    this.weatherPanel = document.getElementById("weatherPanel");
    this.weatherResults = document.getElementById("weatherResults");

    this.map = new MapRenderer("mapContainer");
    this.cards = new RecommendationRenderer(this.result);
    this.weather = new WeatherRenderer(this.weatherResults);

    this.form = document.getElementById("travelForm");
    this.start = document.getElementById("travelStart");
    this.end = document.getElementById("travelEnd");
    this.people = document.getElementById("travelPeople");
    this.budget = document.getElementById("travelBudget");
    this.city = document.getElementById("travelCity");
    this.reviewBtn = document.getElementById("reviewBtn");
  }
  init() {
    if (this.budget)
      this.budget.addEventListener("input", () =>
        NumberUtils.formatInputCurrency(this.budget)
      );
    if (this.start && this.end) {
      this.start.addEventListener("change", () => {
        this.end.min = this.start.value || "";
        if (this.end.value && this.end.value < this.end.min)
          this.end.value = this.end.min;
      });
    }
    this.form.addEventListener("submit", (e) => this.handleSubmit(e));

    // sessionStorageÏóêÏÑú city Ï†ïÎ≥¥ Î≥µÏõê
    this.restoreCityFromStorage();

    // URL ÌååÎùºÎØ∏ÌÑ∞ ÌôïÏù∏ Î∞è ÏûêÎèô Ïã§Ìñâ
    this.checkUrlParams();
  }

  restoreCityFromStorage() {
    const savedCity = sessionStorage.getItem("travelCity");
    if (savedCity && this.city && !this.city.value) {
      this.city.value = savedCity;
    }
  }

  checkUrlParams() {
    const params = new URLSearchParams(window.location.search);
    const city = params.get("city");
    const startDate = params.get("startDate");
    const endDate = params.get("endDate");
    const people = params.get("people");
    const budget = params.get("budget");

    if (city && startDate && endDate && people && budget) {
      // ÌèºÏóê Í∞í Ï±ÑÏö∞Í∏∞
      if (this.city) this.city.value = city;
      if (this.start) this.start.value = startDate;
      if (this.end) this.end.value = endDate;
      if (this.people) this.people.value = people;
      if (this.budget)
        this.budget.value = Number(budget).toLocaleString("ko-KR");

      // city Ï†ïÎ≥¥Î•º sessionStorageÏóê Ï†ÄÏû•
      sessionStorage.setItem("travelCity", city);

      // ÏûêÎèôÏúºÎ°ú Í≤ÄÏÉâ Ïã§Ìñâ
      this.autoSubmit(city, startDate, endDate, people, Number(budget));
    }
  }

  async autoSubmit(city, startDate, endDate, people, budgetNum) {
    showLoading(this.loading);
    this.rightPanel.style.display = "none";

    try {
      const itinerary = await getAiRecommendation({
        city,
        startDate,
        endDate,
        people,
        budget: budgetNum,
      });

      if (!itinerary || !itinerary.dayPlans || !itinerary.dayPlans.length) {
        throw new Error("ÏÑúÎ≤ÑÏóêÏÑú Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏùëÎãµÏùÑ Î∞õÏïòÏäµÎãàÎã§.");
      }

      const fx = 9.5;
      sanitizePlan(itinerary, fx);

      const optimized = ItineraryPlanner.optimizeAll(itinerary.dayPlans || []);
      const finalItin = { city: itinerary.city || city, dayPlans: optimized };

      sanitizePlan(finalItin, fx);

      this.map.init([34.6937, 135.5023], 11);
      this.cards.render(finalItin, this.map);
      this.map.renderDayPlans(finalItin.dayPlans);

      // Ïò§Î•∏Ï™Ω Ìå®ÎÑê ÌëúÏãú (Îßµ + ÎÇ†Ïî® ÏòÅÏó≠ ÌëúÏãú)
      this.rightPanel.style.display = null;
      setTimeout(() => this.map.map.invalidateSize(), 0);

      // ÎÇ†Ïî® Ï†ïÎ≥¥ Î°úÎî© ÏãúÏûë
      this.weather.showLoading();

      // AI ÏùëÎãµÏùò Ï≤´ Î≤àÏß∏ Ïû•ÏÜå Ï¢åÌëú Ï∂îÏ∂ú
      const firstStop = finalItin.dayPlans?.[0]?.stops?.[0];
      const weatherLat = firstStop?.lat || 34.6937;
      const weatherLng = firstStop?.lng || 135.5023;

      this.fetchAndRenderWeather({
        city: finalItin.city,
        lat: weatherLat,
        lng: weatherLng,
        startDate: startDate,
        averageWeather: itinerary.averageWeather,
      });

      this.reviewBtn.hidden = false;
      this.reviewBtn.addEventListener("click", () => {
        sessionStorage.setItem("reviewCourse", JSON.stringify(finalItin));
        window.location.href = "/src/review-form.html";
      });
    } catch (err) {
      console.error("AI Ï∂îÏ≤ú Ïò§Î•ò:", err);

      let errorMessage = "Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.";
      if (err.message.includes("Failed to fetch")) {
        errorMessage =
          "ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.";
      } else if (err.message.includes("AI Ï∂îÏ≤ú ÏöîÏ≤≠ Ïã§Ìå®")) {
        errorMessage = `ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${err.message}`;
      } else if (err.message) {
        errorMessage += `<br/><small>${escapeHtml(err.message)}</small>`;
      }

      this.result.innerHTML = `<p style="color: #ef4444;">${errorMessage}</p>`;
    } finally {
      hideLoading(this.loading);
    }
  }

  /**
   * ÎÇ†Ïî® Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏ÏôÄÏÑú ÌôîÎ©¥Ïóê Î†åÎçîÎßÅÌï©ÎãàÎã§.
   * - 5Ïùº Ïù¥ÎÇ¥: OpenWeatherMap Ïã§ÏãúÍ∞Ñ ÏòàÎ≥¥
   * - 5Ïùº Ïù¥ÌõÑ: AIÍ∞Ä Ï†úÍ≥µÌïú ÌèâÍ∑† ÎÇ†Ïî® ÏÇ¨Ïö©
   */
  async fetchAndRenderWeather({ city, lat, lng, startDate, averageWeather }) {
    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const travelDate = new Date(startDate);
      travelDate.setHours(0, 0, 0, 0);
      const diffDays = Math.ceil((travelDate - today) / (1000 * 60 * 60 * 24));

      const apiBaseUrl = "http://localhost:3000";

      console.log(`[ÎÇ†Ïî® Î°úÏßÅ] ${city}, Ïó¨ÌñâÍπåÏßÄ ${diffDays}Ïùº`);

      // 5Ïùº Ïù¥ÎÇ¥: Ïã§ÏãúÍ∞Ñ ÎÇ†Ïî® API Ìò∏Ï∂ú
      if (diffDays >= 0 && diffDays <= 5) {
        const params = new URLSearchParams({
          city,
          lat,
          lng,
          startDate,
        });

        const response = await fetch(
          `${apiBaseUrl}/api/routes/weather?${params}`
        );

        if (!response.ok) {
          throw new Error("Ïã§ÏãúÍ∞Ñ ÎÇ†Ïî® API Ïò§Î•ò");
        }

        const weatherData = await response.json();
        this.weather.render(weatherData);
        console.log(`[Ïã§ÏãúÍ∞Ñ ÎÇ†Ïî® ÌëúÏãú] ${city}`);
        return;
      }

      // 5Ïùº Ïù¥ÌõÑ: AIÍ∞Ä Ï†úÍ≥µÌïú ÌèâÍ∑† ÎÇ†Ïî® ÏÇ¨Ïö©
      if (averageWeather) {
        this.weather.render({
          ...averageWeather,
          city,
          isAverage: true,
          isRealTime: false,
        });
        console.log(`[AI ÌèâÍ∑† ÎÇ†Ïî® ÌëúÏãú] ${city} - ${averageWeather.month}Ïõî`);
      } else {
        this.weather.showError("ÎÇ†Ïî® Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.");
      }
    } catch (err) {
      console.error("ÎÇ†Ïî® Ï†ïÎ≥¥ Î°úÎìú Ïò§Î•ò:", err);

      // Ïã§ÏãúÍ∞Ñ ÎÇ†Ïî® Ïã§Ìå® Ïãú AI ÌèâÍ∑† ÎÇ†Ïî®Î°ú Ìè¥Î∞±
      if (averageWeather) {
        this.weather.render({
          ...averageWeather,
          city,
          isAverage: true,
          isRealTime: false,
        });
        console.log(`[Ïã§ÏãúÍ∞Ñ Ïã§Ìå®, AI ÌèâÍ∑† ÎÇ†Ïî® ÌëúÏãú] ${city}`);
      } else {
        this.weather.showError("ÎÇ†Ïî® Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.");
      }
    }
  }

  async handleSubmit(e) {
    e.preventDefault();
    const start = this.start?.value;
    const end = this.end?.value;
    const people = (this.people?.value || "").trim();
    const budgetNum = Number(stripDigits(this.budget?.value || ""));
    const city = (
      this.city?.value ||
      sessionStorage.getItem("travelCity") ||
      "Ïò§ÏÇ¨Ïπ¥"
    ).trim();
    const peopleNum = parseInt(people, 10);

    if (!start || !end || !people || !budgetNum) {
      alert("Í∏∞Í∞Ñ / Ïù∏Ïõê / Í≤ΩÎπÑÎ•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }
    if (budgetNum <= 0) {
      alert("Í≤ΩÎπÑÎäî 0Î≥¥Îã§ Ïª§Ïïº Ìï©ÎãàÎã§.");
      return;
    }
    if (isNaN(peopleNum) || peopleNum <= 0) {
      alert("Ïù∏ÏõêÏùÄ ÏñëÏùò Ï†ïÏàòÏó¨Ïïº Ìï©ÎãàÎã§.");
      return;
    }
    if (new Date(end) < new Date(start)) {
      alert("Ï¢ÖÎ£åÏùºÏùÄ ÏãúÏûëÏùºÎ≥¥Îã§ Îπ†Î•º Ïàò ÏóÜÏäµÎãàÎã§.");
      return;
    }

    // city Ï†ïÎ≥¥Î•º sessionStorageÏóê Ï†ÄÏû•
    sessionStorage.setItem("travelCity", city);

    showLoading(this.loading);
    this.rightPanel.style.display = "none";

    try {
      const itinerary = await getAiRecommendation({
        city,
        startDate: start,
        endDate: end,
        people,
        budget: budgetNum,
      });

      if (!itinerary || !itinerary.dayPlans || !itinerary.dayPlans.length) {
        throw new Error("ÏÑúÎ≤ÑÏóêÏÑú Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏùëÎãµÏùÑ Î∞õÏïòÏäµÎãàÎã§.");
      }

      const fx = 9.5;
      sanitizePlan(itinerary, fx);

      const optimized = ItineraryPlanner.optimizeAll(itinerary.dayPlans || []);
      const finalItin = { city: itinerary.city || city, dayPlans: optimized };

      sanitizePlan(finalItin, fx);

      this.map.init([34.6937, 135.5023], 11);
      this.cards.render(finalItin, this.map);
      this.map.renderDayPlans(finalItin.dayPlans);

      // Ïò§Î•∏Ï™Ω Ìå®ÎÑê ÌëúÏãú (Îßµ + ÎÇ†Ïî® ÏòÅÏó≠ ÌëúÏãú)
      this.rightPanel.style.display = null;
      setTimeout(() => this.map.map.invalidateSize(), 0); // ÏßÄÎèÑ Íπ®Ïßê Î∞©ÏßÄ

      // ÎÇ†Ïî® Ï†ïÎ≥¥ Î°úÎî© ÏãúÏûë (Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Î°úÎìú)
      this.weather.showLoading();

      // AI ÏùëÎãµÏùò Ï≤´ Î≤àÏß∏ Ïû•ÏÜå Ï¢åÌëú Ï∂îÏ∂ú
      const firstStop = finalItin.dayPlans?.[0]?.stops?.[0];
      const weatherLat = firstStop?.lat || 34.6937; // Í∏∞Î≥∏Í∞í: Ïò§ÏÇ¨Ïπ¥
      const weatherLng = firstStop?.lng || 135.5023;

      this.fetchAndRenderWeather({
        city: finalItin.city, // AIÍ∞Ä Ï∂îÏ≤úÌïú ÏµúÏ¢Ö ÎèÑÏãúÎ™Ö
        lat: weatherLat, // Ï≤´ Î≤àÏß∏ Ïû•ÏÜåÏùò ÏúÑÎèÑ
        lng: weatherLng, // Ï≤´ Î≤àÏß∏ Ïû•ÏÜåÏùò Í≤ΩÎèÑ
        startDate: start, // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†•Ìïú Ïó¨Ìñâ ÏãúÏûëÏùº
        averageWeather: itinerary.averageWeather, // AIÍ∞Ä Ï†úÍ≥µÌïú ÌèâÍ∑† ÎÇ†Ïî®
      });

      // Î¶¨Î∑∞ Î≤ÑÌäº ÌëúÏãú Î∞è Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
      this.reviewBtn.hidden = false;
      this.reviewBtn.addEventListener("click", () => {
        sessionStorage.setItem("reviewCourse", JSON.stringify(finalItin));
        window.location.href = "/src/review-form.html";
      });
    } catch (err) {
      console.error("AI Ï∂îÏ≤ú Ïò§Î•ò:", err);

      let errorMessage = "Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.";
      if (err.message.includes("Failed to fetch")) {
        errorMessage =
          "ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.";
      } else if (err.message.includes("AI Ï∂îÏ≤ú ÏöîÏ≤≠ Ïã§Ìå®")) {
        errorMessage = `ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${err.message}`;
      } else if (err.message) {
        errorMessage += `<br/><small>${escapeHtml(err.message)}</small>`;
      }

      this.result.innerHTML = `<p style="color: #ef4444;">${errorMessage}</p>`;
    } finally {
      hideLoading(this.loading);
    }
  }
}

document.addEventListener("DOMContentLoaded", () => new AppController().init());
